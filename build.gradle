plugins {
  id 'java'
  id 'io.quarkus'
  id 'com.adarshr.test-logger' version '3.2.0'
}

apply from: 'code-analysis/code-analysis.gradle'

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url "https://packages.confluent.io/maven/"
  }
}

jacocoTestReport {
  dependsOn test

  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: [
          '**/opencensus/**'
      ])
    }))
  }
}

dependencies {
  implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")

  implementation 'io.quarkus:quarkus-micrometer-registry-prometheus'

  implementation 'io.quarkus:quarkus-container-image-jib'
  implementation 'io.quarkus:quarkus-resteasy'
  implementation 'io.quarkus:quarkus-websockets'
  implementation 'io.quarkus:quarkus-resteasy-jackson'
  implementation 'io.quarkus:quarkus-scheduler'
  implementation 'org.assertj:assertj-core'

  implementation 'com.fasterxml.jackson.core:jackson-core:2.12.3'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'

  testImplementation 'io.quarkus:quarkus-junit5'
  testImplementation 'io.rest-assured:rest-assured'
}

group 'net.explorviz'
version '1.0-SNAPSHOT'

compileJava {
  options.encoding = 'UTF-8'
  options.compilerArgs << '-parameters'
}

compileTestJava {
  options.encoding = 'UTF-8'
}

java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(JavaCompile) {
  // Turn on all javac warnings instead of classfile and processing, which produces many false-positives about
  // annotations and cast which is triggered by the auto-generated Dao implementations
  options.compilerArgs << "-Xlint:all" << "-Xlint:-classfile" << "-Xlint:-processing" << "-Xlint:-cast"
}

test {
  systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
